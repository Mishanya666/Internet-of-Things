#include <SSD1306Wire.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>

// Инициализация дисплея (SDA - D1/IO5, SCL - D2/IO4)
SSD1306Wire display(0x3c, 5, 4);

// Wi-Fi и веб-сервер
const char* ssid = "ESP8266_Moshi";
const char* password = "12345678";
ESP8266WebServer server(80);


struct Emotion {
  const unsigned char* frames[4]; 
  int frameCount;
  const char* text;
  const char* emoji;
};

Emotion emotions[] = {
  {{happy_face, happy_face_blink, happy_face_open, happy_face}, 4, "Happy!", "😊"},
  {{sad_face_blink, sad_face_blink, sad_face_frown, sad_face_blink}, 4, "Sad...", "😢"},
  {{surprised_face, surprised_face_blink, surprised_face_open, surprised_face}, 4, "Wow!", "😮"},
  {{sleepy_face, sleepy_face_blink, sleepy_face_yawn, sleepy_face}, 4, "Sleepy...", "😴"},
  {{love_face, love_face_blink, love_face_hearts, love_face}, 4, "In Love!", "😍"},
  {{angry_face, angry_face_blink, angry_face_scowl, angry_face}, 4, "Angry!", "😣"},
  {{confused_face, confused_face_blink, confused_face_tilt, confused_face}, 4, "Confused?", "😕"}
};
const int num_emotions = 7;

int lastClientCount = 0;
unsigned long lastConnectionTime = 0;
unsigned long lastIdleChange = 0;
unsigned long lastFrameChange = 0;
unsigned long lastEnergyChange = 0;
unsigned long lastHungerChange = 0;
unsigned long lastBoredomChange = 0;
int currentEmotion = -1;
int previousEmotion = -1;
int currentFrame = 0;
int energy = 100;
int hunger = 100;
int boredom = 100;
String customMessage = "";
const unsigned long idleInterval = 10000;
const unsigned long frameInterval = 200; 
const unsigned long energyInterval = 60000;
const unsigned long hungerInterval = 45000;
const unsigned long boredomInterval = 30000;
bool inTransition = false;
unsigned long transitionStartTime = 0;
const unsigned long transitionDuration = 2000; 
const unsigned long guessGameDuration = 30000; 
int energyHistory[10] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 100};
int energyHistoryIndex = 0;

int emotionFrequency[num_emotions] = {0};

struct Transition {
  int fromEmotion;
  int toEmotion;
  int transitionEmotion;
};

Transition transitions[] = {
  {0, 1, 6}, // Happy -> Sad через Confused
  {1, 0, 6}, // Sad -> Happy через Confused
  {0, 2, 6}, // Happy -> Surprised через Confused
  {2, 0, 6}, // Surprised -> Happy через Confused
  {1, 3, 6}, // Sad -> Sleepy через Confused
  {3, 1, 6}  // Sleepy -> Sad через Confused
};
const int num_transitions = 6;
bool adventureMode = false;
unsigned long adventureStartTime = 0;
int adventureSequence[] = {0, 2, 4, 6, 1, 3}; // Happy, Surprised, Love, Confused, Sad, Sleepy
int adventureIndex = 0;
const unsigned long adventureInterval = 15000;

bool guessGameActive = false;
int guessGameEmotion = -1;
unsigned long guessGameStartTime = 0;

void displayEmotion(int emotion, int frame) {
  display.clear();
  display.drawXbm(48, 0, 32, 32, emotions[emotion].frames[frame]);
  display.setFont(ArialMT_Plain_10);
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  if (guessGameActive) {
    display.drawString(64, 40, "Guess my emotion!");
  } else {
    display.drawString(64, 40, emotions[emotion].text);
  }
  display.display();
}

void updateEmotionBasedOnState() {
  if (guessGameActive || adventureMode || inTransition) return;

  int maxFrequency = 0;
  for (int i = 0; i < num_emotions; i++) {
    if (emotionFrequency[i] > maxFrequency) maxFrequency = emotionFrequency[i];
  }

  if (energy <= 30 || hunger <= 30) {
    setEmotion(3); // Sleepy
  } else if (hunger <= 50) {
    setEmotion(1); // Sad
  } else if (boredom <= 50) {
    setEmotion(6); // Confused
  } else if (maxFrequency > 5 && emotionFrequency[4] == maxFrequency) {
    setEmotion(4); // Love
  } else {
    setEmotion(0); // Happy
  }
}
