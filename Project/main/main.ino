#include <SSD1306Wire.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>

SSD1306Wire display(0x3c, 5, 4);

// Wi-Fi и веб-сервер
const char* ssid = "ESP8266_Moshi";
const char* password = "12345678";
ESP8266WebServer server(80);

const unsigned char happy_face[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char happy_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE,
  0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char happy_face_open[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x9F, 0xFC, 0xFE,
  0x7F, 0xCF, 0xFC, 0xFE, 0x7F, 0xE7, 0xF8, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char sad_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x00, 0x00, 0xFE,
  0x7F, 0x00, 0x00, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char sad_face_frown[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0x7F, 0xFE, 0xFE,
  0x7F, 0x7F, 0xFE, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char surprised_face[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE3, 0xC7, 0xFE, 0x7F, 0xC7, 0xE3, 0xFE, 0x7F, 0x8F, 0xF1, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char surprised_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE,
  0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char surprised_face_open[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE3, 0xC7, 0xFE, 0x7F, 0xC7, 0xE3, 0xFE, 0x7F, 0x8F, 0xF1, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0x9F, 0xFC, 0xFE, 0x7F, 0xCF, 0xFC, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char sleepy_face[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char sleepy_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char sleepy_face_yawn[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x9F, 0xFC, 0xFE,
  0x7F, 0x9F, 0xFC, 0xFE, 0x7F, 0xCF, 0xF8, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char love_face[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char love_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE,
  0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char love_face_hearts[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xC3, 0xC3, 0xFC, 0x3F, 0x81, 0x81, 0xFC,
  0x7F, 0x81, 0x81, 0xFE, 0x7F, 0xC3, 0xC3, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE,
  0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xC3, 0xC3, 0xFE, 0x7F, 0x81, 0x81, 0xFE, 0x3F, 0x81, 0x81, 0xFC, 0x3F, 0xC3, 0xC3, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char angry_face[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xE3, 0xE7, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE,
  0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0x1F, 0xF8, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char angry_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xE3, 0xE7, 0xFE,
  0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE,
  0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0x1F, 0xF8, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char angry_face_scowl[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xE7, 0xE7, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0x3F, 0xFC, 0xFE,
  0x7F, 0x3F, 0xFC, 0xFE, 0x7F, 0x1F, 0xF8, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char confused_face[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xE3, 0xC7, 0xFE,
  0x7F, 0xC7, 0xE3, 0xFE, 0x7F, 0x8F, 0xF1, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char confused_face_blink[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xE3, 0xC7, 0xFE,
  0x7F, 0xC0, 0x03, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE,
  0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char confused_face_tilt[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xE0,
  0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
  0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xE7, 0xE7, 0xFE,
  0x7F, 0xCF, 0xF3, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0x9F, 0xF9, 0xFE, 0x7F, 0xCF, 0xF3, 0xFE,
  0x7F, 0xE7, 0xE7, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE,
  0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xF8,
  0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x3F, 0xFC, 0x00,
  0x00, 0x00, 0x00, 0x00
};

struct Emotion {
  const unsigned char* frames[4];
  int frameCount;
  const char* text;
  const char* emoji;
};

Emotion emotions[] = {
  {{happy_face, happy_face_blink, happy_face_open, happy_face}, 4, "Happy!", "😊"},
  {{sad_face_blink, sad_face_blink, sad_face_frown, sad_face_blink}, 4, "Sad...", "😢"},
  {{surprised_face, surprised_face_blink, surprised_face_open, surprised_face}, 4, "Wow!", "😮"},
  {{sleepy_face, sleepy_face_blink, sleepy_face_yawn, sleepy_face}, 4, "Sleepy...", "😴"},
  {{love_face, love_face_blink, love_face_hearts, love_face}, 4, "In Love!", "😍"},
  {{angry_face, angry_face_blink, angry_face_scowl, angry_face}, 4, "Angry!", "😣"},
  {{confused_face, confused_face_blink, confused_face_tilt, confused_face}, 4, "Confused?", "😕"}
};
const int num_emotions = 7;

int lastClientCount = 0;
unsigned long lastConnectionTime = 0;
unsigned long lastIdleChange = 0;
unsigned long lastFrameChange = 0;
unsigned long lastEnergyChange = 0;
int currentEmotion = -1;
int previousEmotion = -1;
int currentFrame = 0;
int energy = 100;
String customMessage = "";
const unsigned long idleInterval = 10000;
const unsigned long frameInterval = 200;
const unsigned long energyInterval = 60000;
bool inTransition = false;
unsigned long transitionStartTime = 0;
const unsigned long transitionDuration = 2000;
int energyHistory[10] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 100};
int energyHistoryIndex = 0;

int emotionFrequency[num_emotions] = {0};

struct Transition {
  int fromEmotion;
  int toEmotion;
  int transitionEmotion;
};

Transition transitions[] = {
  {0, 1, 6}, // Happy -> Sad через Confused
  {1, 0, 6}, // Sad -> Happy через Confused
  {0, 2, 6}, // Happy -> Surprised через Confused
  {2, 0, 6}, // Surprised -> Happy через Confused
  {1, 3, 6}, // Sad -> Sleepy через Confused
  {3, 1, 6}  // Sleepy -> Sad через Confused
};
const int num_transitions = 6;

void displayEmotion(int emotion, int frame) {
  display.clear();
  display.drawXbm(48, 0, 32, 32, emotions[emotion].frames[frame]);
  display.setFont(ArialMT_Plain_10);
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.drawString(64, 40, emotions[emotion].text);
  display.display();
}

void updateEmotionBasedOnState() {
  if (inTransition) return;

  int maxFrequency = 0;
  for (int i = 0; i < num_emotions; i++) {
    if (emotionFrequency[i] > maxFrequency) maxFrequency = emotionFrequency[i];
  }

  if (energy <= 30) {
    setEmotion(3); // Sleepy
  } else if (maxFrequency > 5 && emotionFrequency[4] == maxFrequency) {
    setEmotion(4); // Love
  } else {
    setEmotion(0); // Happy
  }
}

void setEmotion(int newEmotion) {
  if (newEmotion == currentEmotion || inTransition) return;

  emotionFrequency[newEmotion]++;
  if (currentEmotion != -1) {
    for (int i = 0; i < num_transitions; i++) {
      if (transitions[i].fromEmotion == currentEmotion && transitions[i].toEmotion == newEmotion) {
        inTransition = true;
        transitionStartTime = millis();
        previousEmotion = currentEmotion;
        currentEmotion = transitions[i].transitionEmotion;
        currentFrame = 0;
        displayEmotion(currentEmotion, currentFrame);
        return;
      }
    }
  }
  previousEmotion = currentEmotion;
  currentEmotion = newEmotion;
  currentFrame = 0;
  displayEmotion(currentEmotion, currentFrame);
}

void handleStatus() {
  StaticJsonDocument<512> doc;
  doc["emotion"] = (currentEmotion >= 0) ? emotions[currentEmotion].text : "None";
  doc["energy"] = energy;
  doc["lastActive"] = lastConnectionTime / 1000;
  doc["message"] = customMessage;
  JsonArray history = doc.createNestedArray("energyHistory");
  for (int i = 0; i < 10; i++) {
    history.add(energyHistory[i]);
  }
  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}

void handleSetEnergy() {
  if (server.hasArg("plain")) {
    StaticJsonDocument<200> doc;
    deserializeJson(doc, server.arg("plain"));
    energy = doc["energy"].as<int>();
    if (energy > 100) energy = 100;
    if (energy < 0) energy = 0;
    energyHistory[energyHistoryIndex] = energy;
    energyHistoryIndex = (energyHistoryIndex + 1) % 10;
    updateEmotionBasedOnState();
    server.send(200, "application/json", "{\"status\":\"ok\"}");
  } else {
    server.send(400, "application/json", "{\"error\":\"Invalid request\"}");
  }
}

void handleSetMessage() {
  if (server.hasArg("plain")) {
    StaticJsonDocument<200> doc;
    deserializeJson(doc, server.arg("plain"));
    customMessage = doc["message"].as<String>();
    server.send(200, "application/json", "{\"status\":\"ok\"}");
  } else {
    server.send(400, "application/json", "{\"error\":\"Invalid request\"}");
  }
}

void handleHappy() { setEmotion(0); server.send(200, "application/json", "{\"status\":\"ok\"}"); }
void handleSad() { setEmotion(1); server.send(200, "application/json", "{\"status\":\"ok\"}"); }
void handleSurprised() { setEmotion(2); server.send(200, "application/json", "{\"status\":\"ok\"}"); }
void handleSleepy() { setEmotion(3); server.send(200, "application/json", "{\"status\":\"ok\"}"); }
void handleLove() { setEmotion(4); server.send(200, "application/json", "{\"status\":\"ok\"}"); }
void handleAngry() { setEmotion(5); server.send(200, "application/json", "{\"status\":\"ok\"}"); }
void handleConfused() { setEmotion(6); server.send(200, "application/json", "{\"status\":\"ok\"}"); }

void setup() {
  Serial.begin(115200);

  display.init();
  display.flipScreenVertically();
  display.clear();
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, "Waiting for device...");
  display.display();

  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);
  Serial.println("Точка доступа создана: ");
  Serial.print("SSID: "); Serial.println(ssid);
  Serial.print("IP: "); Serial.println(WiFi.softAPIP());

  // Настройка веб-сервера
  server.on("/", []() {
    String html = R"rawliteral(
      <!DOCTYPE html>
      <html>
      <head>
        <title>Moshi Control</title>
        <style>
          body { font-family: Arial; text-align: center; background: #f0f0f0; }
          .container { max-width: 600px; margin: auto; padding: 20px; }
          .status { margin: 20px 0; }
          .button { display: block; margin: 10px; padding: 10px; background: #4CAF50; color: white; text-decoration: none; border-radius: 5px; }
          .button:hover { background: #45a049; }
          input[type=range], input[type=text] { margin: 10px; padding: 5px; }
        </style>
        <script>
          function updateStatus() {
            fetch('/status').then(response => response.json()).then(data => {
              document.getElementById('emotion').innerText = data.emotion;

              document.getElementById('lastActive').innerText = new Date(data.lastActive * 1000).toLocaleTimeString();
              document.getElementById('message').innerText = data.message || 'No message';
              let ctx = document.getElementById('energyChart').getContext('2d');
              ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
              ctx.beginPath();
              ctx.moveTo(0, 100 - data.energyHistory[0]);
              for (let i = 1; i < data.energyHistory.length; i++) {
                ctx.lineTo(i * 50, 100 - data.energyHistory[i]);
              }
              ctx.strokeStyle = 'blue';
              ctx.stroke();
            });
          }
          setInterval(updateStatus, 2000);
          function setEnergy() {
            let energy = document.getElementById('energySlider').value;
            fetch('/setEnergy', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ energy: energy })
            });
          }
          function sendMessage() {
            let message = document.getElementById('customMessage').value;
            fetch('/setMessage', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: message })
            });
          }
        </script>
      </head>
      <body onload="updateStatus()">
        <div class="container">
          <h1>Moshi Control</h1>
          <div class="status">
            <p>Current Emotion: <span id="emotion">Waiting...</span></p>

            <p>Last Activity: <span id="lastActive">-</span></p>
            <p>Message: <span id="message">No message</span></p>
            <canvas id="energyChart" width="500" height="100"></canvas>
          </div>
          <a class="button" href="/happy">Make Happy</a>
          <a class="button" href="/sad">Make Sad</a>
          <a class="button" href="/surprised">Make Surprised</a>
          <a class="button" href="/sleepy">Make Sleepy</a>
          <a class="button" href="/love">Make In Love</a>
          <a class="button" href="/angry">Make Angry</a>
          <a class="button" href="/confused">Make Confused</a>
          <div>
            <input type="range" id="energySlider" min="0" max="100" value="100" oninput="setEnergy()">
            <input type="text" id="customMessage" placeholder="Enter message">
            <button class="button" onclick="sendMessage()">Send Message</button>
          </div>
        </div>
      </body>
      </html>
    )rawliteral";
    server.send(200, "text/html", html);
  });

  
  
  server.on("/setMessage", HTTP_POST, handleSetMessage);
  server.on("/happy", handleHappy);
  server.on("/sad", handleSad);
  server.on("/surprised", handleSurprised);
  server.on("/sleepy", handleSleepy);
  server.on("/love", handleLove);
  server.on("/angry", handleAngry);
  server.on("/confused", handleConfused);

  server.begin();
  Serial.println("Веб-сервер запущен");
}

void loop() {
  server.handleClient();

  unsigned long currentTime = millis();

  int currentClientCount = WiFi.softAPgetStationNum();
  if (currentClientCount > 0) {
    lastConnectionTime = currentTime; // Обновляем время последнего подключения
  }

  // Проверка на бездействие
  if (currentTime - lastConnectionTime > idleInterval && currentEmotion != 3) {
    setEmotion(3); // Переключаемся на Sleepy, если нет активности
  }

  // Обработка переходов между эмоциями
  if (inTransition && currentTime - transitionStartTime >= transitionDuration) {
    inTransition = false;
    currentEmotion = previousEmotion; // Завершаем переход, возвращаясь к целевой эмоции
    currentFrame = 0;
    displayEmotion(currentEmotion, currentFrame);
  }

  // Обновление кадров анимации
  if (currentTime - lastFrameChange >= frameInterval) {
    if (currentEmotion >= 0) {
      currentFrame = (currentFrame + 1) % emotions[currentEmotion].frameCount;
      displayEmotion(currentEmotion, currentFrame);
    }
    lastFrameChange = currentTime;
  }

  // Уменьшение энергии со временем
  if (currentTime - lastEnergyChange >= energyInterval) {
    energy = max(0, energy - 5); // Уменьшаем энергию на 5 каждую минуту
    energyHistory[energyHistoryIndex] = energy;
    energyHistoryIndex = (energyHistoryIndex + 1) % 10;
    updateEmotionBasedOnState();
    lastEnergyChange = currentTime;
  }
}
